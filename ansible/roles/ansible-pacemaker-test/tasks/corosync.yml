- name: configure corosync
  template:
    src: "etc/corosync/corosync.conf.j2"
    dest: "{{ corosync_config_file }}"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r"
  notify:
    - restart corosync
    - restart pacemaker

- name: check if {{ corosync_authkey_file }} exists
  stat:
    path: "{{ corosync_authkey_file }}"
  register: "_corosync_authkey"

- name: generate corosync authkey on master server - {{ master_server }}
  command: corosync-keygen -k {{ corosync_authkey_file }}
  when: (inventory_hostname == master_server) and
        (not _corosync_authkey['stat']['exists'])
  register: "_corosync_authkey_generated"

- name: copy corosync authkey to local machine
  fetch:
    flat: yes
    src: "{{ corosync_authkey_file }}"
    dest: "/tmp/authkey"
  when: (inventory_hostname == master_server) and
        (_corosync_authkey_generated.changed)

- name: copy corosync authkey to slave server
  copy:
    src: "/tmp/authkey"
    dest: "{{ corosync_authkey_file }}"
  when: (inventory_hostname != master_server) and
        (not _corosync_authkey['stat']['exists'])

- name: remove corosync authkey
  file:
    path: "/tmp/authkey"
    state: absent
  when: (inventory_hostname == master_server) and
        (_corosync_authkey_generated.changed)
  delegate_to: 127.0.0.1


